// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique
  name           String?   @unique
  image          String?
  hashedPassword String
  createdAt      DateTime  @default(now())
  emailVerified  DateTime? @map("verifiedAt")
  sessions       Session[]
  chats          Chat[]
  Message        Message[]
  Account        Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String? @db.String
  refresh_token     String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime @map("expiresAt")
  user         User     @relation(fields: [userId], references: [id])
  chatId       String   @db.ObjectId
  chat         Chat     @relation(fields: [chatId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Chat {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime  @default(now())
  userId       String
  user         User      @relation(fields: [userId], references: [email])
  createdByWho String?
  Message      Message[]
  files        File[]
  Session      Session[]

  @@map("chats")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  createdBy String?
  content   String
  messageId String   @unique
  lang      String?
  checked   Boolean
  streamed  Boolean  @default(false)
  chatId    String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  liked     Boolean  @default(false)
  disliked  Boolean  @default(false)

  @@map("messages")
}

model File {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  fileData  Bytes
  filename  String
  mimetype  String
  chatId    String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("files")
}

